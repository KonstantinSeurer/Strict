
public class Allocator
{
	public virtual void* Allocate(UInt64 size) mut;
	public virtual void Free(void* address, UInt64 size) mut;

	public Type* New<type Type, type... ArgumentTypes>(ArgumentTypes arguments) mut
	{
		Type* result = Allocate(type(Type).size)<Type*>;
		result.Type(arguments);
		return result;
	}

	public void Delete<type Type>(Type* address) mut
	{
		address.~Type();
		Free(address, type(Type).size);
	}

	public Type[] NewArray<type Type, type... ArgumentTypes>(UInt64 count, ArgumentTypes arguments) mut
	{
		Type[] result = Allocate(type(Type).size * count)<Type[]>;
		for (UInt64 elementIndex = 0; elementIndex < count; elementIndex++)
		{
			result[elementIndex].Type(arguments);
		}
		return result;
	}

	public void DeleteArray<type Type>(UInt64 count, Type[] array) mut
	{
		for (UInt64 elementIndex = 0; elementIndex < count; elementIndex++)
		{
			array[elementIndex].~Type();
		}
		Free(array, type(Type).size * count);
	}
}
